!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=9)}([function(t,e,i){t.exports=i.p+"ab65c472c6b592afe8757bb8be8c6267.png"},function(t,e,i){t.exports=i.p+"5c078847978a138d64371531f48bbdbd.wav"},function(t,e,i){t.exports=i.p+"84c22dc339b5f57e4b15287e0125a9e7.wav"},function(t,e,i){t.exports=i.p+"d4d17f1f4a0eee511856bf90569911c0.wav"},function(t,e,i){t.exports=i.p+"17f99c4e1534406164b4d67012374629.wav"},function(t,e,i){t.exports=i.p+"f912610ac78e8270b6341ec4e6d08d83.wav"},function(t,e,i){t.exports=i.p+"54af95b7b45424485b6ebf0361d019a3.wav"},function(t,e,i){t.exports=i.p+"aa8c51850c09e89bb9a47fb31ee31a38.wav"},function(t,e,i){t.exports=i.p+"9af88a6ac9cfbc392a941b4ed520d5f8.wav"},function(t,e,i){"use strict";i.r(e);var s={};i.r(s),i.d(s,"Player",function(){return Dt}),i.d(s,"Bullet",function(){return Ot}),i.d(s,"Enemy",function(){return At}),i.d(s,"Flag",function(){return Lt}),i.d(s,"PowerupEvents",function(){return Et}),i.d(s,"powerupEvents",function(){return Ct}),i.d(s,"Powerup",function(){return Rt}),i.d(s,"Tank",function(){return wt}),i.d(s,"Movable",function(){return xt});var n=i(0),o=i.n(n),r=i(1),a=i.n(r),h=i(2),c=i.n(h),l=i(3),p=i.n(l),u=i(4),d=i.n(u),m=i(5),g=i.n(m),y=i(6),f=i.n(y),v=i(7),x=i.n(v),w=i(8),b=i.n(w);function M(t,e){return t.x1<e.x2&&t.x2>e.x1&&t.y1<e.y2&&t.y2>e.y1}const T=t=>Math.floor(Math.random()*t);function k(t,e,i){const s=e/t;return Math.floor(i/s)}function S(t,e,i,s){const n=Math.min(k(e.length,i,s),e.length-1),{sprite:o,size:r}=e[n];return o(t,r)}var B,E,C,R,D,O,A;!function(t){t[t.Top=0]="Top",t[t.Bottom=1]="Bottom",t[t.Right=2]="Right",t[t.Left=3]="Left"}(B||(B={})),function(t){t[t.Default=0]="Default",t[t.Fast=1]="Fast",t[t.Armored=2]="Armored",t[t.Armored2=3]="Armored2",t[t.Armored3=4]="Armored3"}(E||(E={})),function(t){t[t.Helmet=0]="Helmet",t[t.Star=1]="Star",t[t.Stopwatch=2]="Stopwatch",t[t.Grenade=3]="Grenade",t[t.Tank=4]="Tank"}(C||(C={})),function(t){t[t.Default=0]="Default",t[t.First=1]="First",t[t.Second=2]="Second"}(R||(R={})),function(t){t[t.None=0]="None",t[t.Brick1=1]="Brick1",t[t.Brick2=2]="Brick2",t[t.Brick3=3]="Brick3",t[t.Brick4=4]="Brick4",t[t.Steel=5]="Steel",t[t.Ice=6]="Ice",t[t.Grass=7]="Grass",t[t.Water=8]="Water"}(D||(D={})),function(t){t[t.under=0]="under",t[t.main=1]="main",t[t.over=2]="over"}(O||(O={})),function(t){t.ArrowUp="ArrowUp",t.ArrowRight="ArrowRight",t.ArrowDown="ArrowDown",t.ArrowLeft="ArrowLeft",t.Space="Space"}(A||(A={}));const L=1/60,j={x:40,y:40},P={x:40,y:40},z={x:280,y:560},F={x:210,y:560},I={x:10,y:10},G=300,N={x:40,y:40},_={[R.Default]:{velocity:100,shotCD:50},[R.First]:{velocity:120,shotCD:40},[R.Second]:{velocity:150,shotCD:30}},W={[E.Default]:{velocity:100,shotCD:70,lives:1},[E.Fast]:{velocity:200,shotCD:60,lives:1},[E.Armored]:{velocity:120,shotCD:70,lives:3}},Q=35,q=35,H=200,U=200,K=600,J=200,V=400,X=300,Y=[{x:0,y:0},{x:560,y:0}],Z=20,$=document.getElementById("root"),tt=$.getContext("2d");tt.font="30px Arial",tt.textAlign="center";const et={canvas:$,context:tt,clearScreen(){tt.clearRect(0,0,$.width,$.height),tt.beginPath()},renderChaingingStage(t){const e=k(X,X,t);tt.fillRect(0,0,600,e),tt.fillRect(0,600-e,600,e)},renderGameOver(t=0){const e=k(X,X,t);tt.fillRect(0,0,600,300-e),tt.fillRect(0,300+e,600,300-e),t||ht.sprites.gameOver({x:275,y:275},{x:50,y:50})},renderStartScreen(){ht.sprites.logo({x:100,y:200},{x:400,y:200}),tt.strokeText("Press any key",300,500)}},it=document.getElementById("dashboard"),st=it.getContext("2d"),nt={canvas:it,context:st,render(t,e,i){const{numberIcons:s,flagIcon:n,playerIcon:o,tankIcon:r}=ht.sprites;((t,e)=>{if(!t.length)return;let i=70,s=0;t.forEach((t,n)=>{e(n%2==0?{x:695,y:i}:{x:670,y:i},{x:15,y:15}),2===s?(i+=20,s=0):s+=1})})(i,r),n({x:670,y:450},{x:50,y:40}),o({x:670,y:380},{x:20,y:20}),s[e]({x:690,y:485},{x:20,y:20}),s[t]({x:700,y:380},{x:20,y:20})},clearScreen(){st.clearRect(0,0,it.width,it.height),st.beginPath()}},ot=(t,e)=>(i,s,n,o)=>(r,a)=>{e.drawImage(t,i,s,n,o,r.x,r.y,a.x,a.y)},rt=t=>{const e=ot(t,et.context),i=ot(t,nt.context);return{player:{[R.Default]:{[B.Top]:[e(0,0,16,15),e(16,0,16,15)],[B.Bottom]:[e(64,0,16,15),e(80,0,16,15)],[B.Right]:[e(96,0,16,15),e(112,0,16,15)],[B.Left]:[e(32,0,16,15),e(48,0,16,15)]},[R.First]:{[B.Top]:[e(0,32.3,16,15),e(15.7,32.5,16,15)],[B.Bottom]:[e(64,32.3,16,15),e(80,32.5,16,15)],[B.Right]:[e(96,32.3,16,15),e(112.3,32,16,15)],[B.Left]:[e(31.7,32,16,15),e(48,32,16,15)]},[R.Second]:{[B.Top]:[e(0,48,16,15),e(15.7,48,16,15)],[B.Bottom]:[e(64,48,16,15),e(80,48,16,15)],[B.Right]:[e(96,48,16,15),e(112.3,48,16,15)],[B.Left]:[e(31.7,48,16,15),e(48,48,16,15)]}},enemy:{[E.Default]:{[B.Top]:[e(128,0,16,15),e(144,0,16,15)],[B.Bottom]:[e(192,0,16,15),e(208,0,16,15)],[B.Right]:[e(223.7,0,16,15),e(239.7,0,16,15)],[B.Left]:[e(160,0,16,15),e(176,0,16,15)]},[E.Fast]:{[B.Top]:[e(128,80,16,15),e(144,80,16,15)],[B.Bottom]:[e(192,80,16,15),e(208,80,16,15)],[B.Right]:[e(224,80,16,15),e(240,80,16,15)],[B.Left]:[e(160,80,16,15),e(176,80,16,15)]},[E.Armored]:{1:{[B.Top]:[e(128.5,111.75,14.75,16),e(144.25,111.75,14.75,16)],[B.Bottom]:[e(191.75,111.75,15.25,16),e(207.5,111.75,15.25,16)],[B.Right]:[e(222.75,111.75,16,16),e(239,111.75,14.75,16)],[B.Left]:[e(159,111.75,16,16),e(174.75,111.75,16,16)]},2:{[B.Top]:[e(0,240,14.75,16),e(16,240,14.75,16)],[B.Bottom]:[e(64,240,15.25,16),e(80,240,15.25,16)],[B.Right]:[e(96,240,16,16),e(112,240,14.75,16)],[B.Left]:[e(32,240,16,16),e(48,240,16,16)]},3:{[B.Top]:[e(128,240,14.75,16),e(144,240,14.75,16)],[B.Bottom]:[e(192,240,15.25,16),e(208,240,15.25,16)],[B.Right]:[e(224,240,16,16),e(240,240,14.75,16)],[B.Left]:[e(160,240,16,16),e(176,240,16,16)]}}},bullet:{[B.Top]:[e(322.25,101.5,5,5.7)],[B.Bottom]:[e(338.5,101.5,5,5.7)],[B.Right]:[e(345.75,101.5,5,5.7)],[B.Left]:[e(329.5,101.5,5,5.7)]},flag:e(304.5,33,16,15.25),flagDeath:e(320,33,16,15.25),tankIcon:i(320.25,192.75,8.5,7.75),flagIcon:i(375.5,184,17,15),playerIcon:i(376.5,144.5,8,8.5),numberIcons:[i(328.5,184,8,7),i(336.5,184,8,7),i(344.5,184,8,7),i(352.5,184,8,7),i(360.5,184,8,7),i(328.5,192,8,7),i(336.5,192,8,7),i(344.5,192,8,7),i(352.5,192,8,7),i(360.5,192,8,7)],logo:e(0,260,375,137),tiles:{[D.Brick1]:e(256,0,8,7),[D.Brick2]:e(264,0,8,7),[D.Brick3]:e(256,8,8,7),[D.Brick4]:e(264,8,8,7),[D.Steel]:e(256,16,8,7),[D.Ice]:e(288,32,8,7),[D.Grass]:e(272,32,8,7),[D.Water]:e(256,40,8,7)},gameOver:e(288.5,184,31.2,16),powerup:{[C.Helmet]:e(255.5,112,16,14),[C.Stopwatch]:e(271.5,112,16,14),[C.Star]:e(303.5,112,16,14),[C.Grenade]:e(319.5,112,16,14),[C.Tank]:e(335.5,112,16,14)},invincible:[e(256,144,15.7,16),e(272.2,144,15.7,16)]}},at=t=>{const e=ot(t,et.context);return{tankSpawn:[{sprite:e(303,97,15,14),size:{x:35,y:35}},{sprite:e(303,97,15,14),size:{x:35,y:35}},{sprite:e(288,97,15,14),size:{x:35,y:35}},{sprite:e(273,97,15,14),size:{x:30,y:30}},{sprite:e(257,97,15,14),size:{x:30,y:30}}],tankDestruction:[{sprite:e(336,128.75,32,32),size:{x:60,y:60}},{sprite:e(304.5,128.75,30.5,31.25),size:{x:60,y:60}},{sprite:e(288.25,128.75,16,15.5),size:{x:40,y:40}},{sprite:e(272.25,128.75,15.75,14.25),size:{x:37,y:37}},{sprite:e(258,128.75,13.75,13.25),size:{x:35,y:35}}]}};const ht=new class{loadSprite(t){return new Promise((e,i)=>{const s=new Image;s.addEventListener("load",()=>{this.image=s,this.sprites=rt(s),this.variableSprites=at(s),e()}),s.src=t})}loadAudio(t){this.audio=t}};const ct=new class{constructor(){this.queue=new Set}handleEvent(t,e){const{code:i,type:s}=t;return e.isWaitingForRestart()?e.restart():e.isStartScreen?e.play():void(A[i]&&("keydown"===s?this.queue.add(A[i]):this.queue.delete(A[i])))}getKey(){return Array.from(this.queue).pop()}listenToEvents(t){["keydown","keyup"].forEach(e=>{window.addEventListener(e,e=>{this.handleEvent(e,t)})})}},lt=[[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,5,5,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,5,5,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0],[1,2,0,0,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,0,0,1,2],[5,5,0,0,3,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,0,0,5,5],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,1,2,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,3,4,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0,1,2,0,0,1,2,0,0,0],[0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0,3,4,0,0,3,4,0,0,0],[0,0,1,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,1,0,0],[0,0,1,3,4,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,3,4,1,0,0],[0,0,1,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,1,0,0],[0,0,1,3,4,0,0,3,4,0,0,0,0,1,2,1,2,0,0,0,0,3,4,0,0,3,4,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,1,2,5,5,1,2,1,2,5,5,1,2,5,5,1,2,1,2,5,5,1,2,0,0,0,0],[0,0,0,0,3,4,5,5,3,4,3,4,5,5,3,4,5,5,3,4,3,4,5,5,3,4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,5,5,0,0,1,2,0,0,5,5,1,2,5,5,0,0,1,2,0,0,1,2,0,0,0,0],[0,0,0,0,5,5,0,0,3,4,0,0,5,5,3,4,5,5,0,0,3,4,0,0,3,4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,2,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,1,2,0,0,0,0],[0,0,0,0,3,4,0,0,7,7,0,7,0,7,0,7,0,7,0,7,0,7,0,0,3,4,0,0,0,0],[0,0,0,0,1,2,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,7,0,0,1,2,0,0,0,0],[0,0,0,0,3,4,0,0,7,7,0,7,0,7,0,7,0,7,0,7,0,7,0,0,3,4,0,0,0,0],[0,0,0,0,1,2,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,7,0,0,1,2,0,0,0,0],[0,0,0,0,3,4,0,0,7,7,0,7,0,7,0,7,0,7,0,7,0,7,0,0,3,4,0,0,0,0],[0,0,0,0,0,0,0,0,5,0,6,6,6,6,6,0,7,0,7,0,7,7,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,5,7,6,6,6,6,6,7,0,7,0,7,0,7,0,0,0,0,0,0,0,0],[0,0,0,0,1,2,0,0,5,0,6,6,6,6,7,0,7,0,7,0,7,7,0,0,1,2,0,0,0,0],[0,0,0,0,3,4,0,0,5,7,6,6,6,6,0,7,0,7,0,7,0,7,0,0,3,4,0,0,0,0],[0,0,0,0,1,2,0,0,7,0,6,6,7,0,7,0,7,0,7,0,7,7,0,0,1,2,0,0,0,0],[0,0,0,0,3,4,0,0,7,7,6,6,0,7,0,7,0,7,0,7,0,7,0,0,3,4,0,0,0,0],[0,0,0,0,0,0,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,7,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,2,5,5,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,5,5,3,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0]]],pt=[[2,2,0,0,1,2,1,0,0,0],[2,2,0,0,1,2,1,0,0,0]],ut=[D.Brick1,D.Brick2,D.Brick3,D.Brick4,D.Steel,D.Water],dt=[D.Grass,D.Water,D.None],mt={[O.under]:[D.Ice,D.Water],[O.main]:[D.Brick1,D.Brick2,D.Brick3,D.Brick4,D.Steel],[O.over]:[D.Grass]};class gt{constructor(t){this.tiles=t.map(t=>[...t])}destroy(t){const e=Math.max(0,Math.floor(t.x/Z)),i=Math.max(0,Math.floor(t.y/Z));this.tiles[i][e]=D.None}lookup(t){const e=Math.min(Math.max(0,Math.floor(t.x/Z)),29),i=Math.min(Math.max(0,Math.floor(t.y/Z)),29);return{type:this.tiles[i][e],position:{x:e*Z,y:i*Z}}}lookupRange(t,e){let i=[];const s=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y);return s>0&&s>Z?i.push({x:t.x+Z,y:t.y}):n>0&&n>Z&&i.push({x:t.x,y:t.y+Z}),[t,...i,e].map(t=>this.lookup(t))}renderLayer(t){this.tiles.forEach((e,i)=>{e.forEach((e,s)=>{mt[t].includes(e)&&ht.sprites.tiles[e]({x:s*Z,y:i*Z},{x:Z,y:Z})})})}}class yt{constructor(t){this.setupTracks(t)}setupTracks(t){this.tracks=t.reduce((t,e)=>{if("string"==typeof e)t[e]=new Audio(ht.audio[e]);else{const{trackName:i,loop:s}=e;t[i]=new Audio(ht.audio[i]),t[i].loop=s}return t},{})}play(t){return this.tracks[t].play()}pause(t){return this.tracks[t].pause()}pauseAll(){Object.values(this.tracks).forEach(t=>t.pause())}}class ft{constructor(){this.timers={}}setTimer(t,e){this.timers[t]=e}getTimer(t){return this.timers[t]}some(t){return Object.entries(this.timers).some(e=>t.includes(e[0])&&e[1]>=0)}decrementTimers(){const t=Object.entries(this.timers).filter(t=>0===t[1]);t.length&&t.forEach(t=>{delete this.timers[t[0]]}),Object.keys(this.timers).forEach(t=>{this.timers[t]-=1})}}class vt{constructor(t,e){this.id=vt.numberGen,this.position=t,this.size=e,vt.numberGen+=1}update(){}render(){}resolveEntityCollision(t){}getBoundingBox(){const{x:t,y:e}=this.position,{x:i,y:s}=this.size;return{x1:t,x2:t+i,y1:e,y2:e+s}}deconstruct(){}}vt.numberGen=0;class xt extends vt{constructor(t,e,i){super(t,e),this.direction=i,this.prevPosition=Object.assign({},t)}resolveEdgeCollision(){}resolveTileCollision(t,e){}resolveEntityCollision(t){}move(t){this.prevPosition=Object.assign({},this.position),this.direction===B.Top?this.position.y-=t*L:this.direction===B.Bottom?this.position.y+=t*L:this.direction===B.Left?this.position.x-=t*L:this.direction===B.Right&&(this.position.x+=t*L)}goBack(){this.position=Object.assign({},this.prevPosition)}animateMovement(t){let e;e=this.direction===B.Left||this.direction===B.Right?this.position.x:this.position.y,t[Math.floor(e/.3)%t.length](this.position,this.size)}isOutOfScreen(){const t=this.getBoundingBox();return t.y1<0||t.y2>600||t.x1<0||t.x2>600}getFrontCollisionPoints(){const{x1:t,x2:e,y1:i,y2:s}=this.getBoundingBox();return this.direction===B.Top?[{x:t,y:i},{x:e,y:i}]:this.direction===B.Right?[{x:e,y:i},{x:e,y:s}]:this.direction===B.Bottom?[{x:t,y:s},{x:e,y:s}]:this.direction===B.Left?[{x:t,y:i},{x:t,y:s}]:void 0}}class wt extends xt{constructor(t,e,i){super(t,e,i)}shot(t){if(this.timeManager.getTimer("shotCD"))return;let e;const{x:i,y:s}=I;e=this.direction===B.Top?{x:this.size.x/2+this.position.x-i/2,y:this.position.y-s}:this.direction===B.Right?{x:this.size.x+this.position.x,y:this.size.y/2+this.position.y-s/2}:this.direction===B.Bottom?{x:this.size.x/2+this.position.x-i/2,y:this.size.y+this.position.y}:{x:this.position.x-i,y:this.size.y/2+this.position.y-s/2},jt.spawnEntity("Bullet",e,this.direction,this),this.timeManager.setTimer("shotCD",t)}die(){this.timeManager.setTimer("death",Q),this.soundManager.play("explode"),jt.toRemove(this.id)}forgiveCollision(t){const[e,i]=this.getFrontCollisionPoints(),s=t.position;if(this.direction===B.Top||this.direction===B.Bottom){const t=Math.min(Math.abs(s.x-e.x),Math.abs(s.x-i.x));if(t>0&&t<5){return{x:this.position.x>s.x?s.x+Z:s.x-this.size.x,y:this.prevPosition.y}}}else if(this.direction===B.Left||this.direction===B.Right){const t=Math.min(Math.abs(s.y-e.y),Math.abs(s.y-i.y));if(t>0&&t<5){const t=this.position.y>s.y?s.y+Z:s.y-this.size.y;return{x:this.prevPosition.x,y:t}}}}}function bt(t){return t instanceof wt}function Mt(t){return t instanceof Dt}function Tt(t){return t instanceof At}function kt(t){return t instanceof Ot}function St(t){return t instanceof Lt}function Bt(t){return t instanceof Rt}class Et{constructor(){this.observers={}}subscribe(t,e){this.observers[t]=e}unsubscribe(t){delete this.observers[t]}notify(t){Object.values(this.observers).forEach(e=>e(t))}}const Ct=new Et;class Rt extends vt{constructor(t,e){super(e,Object.assign({},N)),this.type=t,this.timeManager=new ft,this.soundManager=new yt(["powerup"]),this.timeManager.setTimer("live",K)}update(){const t=this.timeManager.getTimer("live");0===t?jt.toRemove(this.id):t===J&&this.timeManager.setTimer("blink",J),this.timeManager.decrementTimers()}render(){const t=this.timeManager.getTimer("blink");t&&t%50==0||ht.sprites.powerup[this.type](this.position,this.size)}resolveEntityCollision(t){Mt(t)&&(jt.toRemove(this.id),Ct.notify(this.type),this.soundManager.play("powerup"))}}class Dt extends wt{constructor(){super(Object.assign({},F),Object.assign({},j),B.Top),this.lives=3,this.power=R.Default,this.timeManager=new ft,this.soundManager=new yt(["explode",{trackName:"neutral",loop:!0},{trackName:"move",loop:!0}]),this.timeManager.setTimer("spawn",q),this.timeManager.setTimer("invincible",H),Ct.subscribe(this.id,function(t){t===C.Tank?this.lives+=1:t===C.Helmet?this.timeManager.setTimer("invincible",H):t===C.Star&&this.power<R.Second&&(this.power+=1)}.bind(this))}update(){this.timeManager.decrementTimers();const t=this.timeManager.getTimer("death"),e=this.timeManager.getTimer("spawn");t?1===t&&this.respawn(!0):e||(this.soundManager.play("neutral"),this.processInput())}render(){const t=this.timeManager.getTimer("spawn"),e=this.timeManager.getTimer("death"),i=this.timeManager.getTimer("invincible");if(t)return S(this.position,ht.variableSprites.tankSpawn,q,t);if(e)return S(this.position,ht.variableSprites.tankDestruction,Q,e);if(i){const t=ht.sprites.invincible;t[i%t.length](this.position,this.size)}this.animateMovement(ht.sprites.player[this.power][this.direction])}processInput(){const t=ct.getKey();let e=!0;t===A.ArrowUp?this.direction=B.Top:t===A.ArrowDown?this.direction=B.Bottom:t===A.ArrowLeft?this.direction=B.Left:t===A.ArrowRight?this.direction=B.Right:(this.soundManager.pause("move"),e=!1),t===A.Space&&this.shot(_[this.power].shotCD),e&&(this.soundManager.pause("neutral"),this.soundManager.play("move"),this.move(_[this.power].velocity))}resolveEdgeCollision(){this.goBack()}resolveTileCollision(t){if(1===t.length){const e=this.forgiveCollision(t[0]);e?this.position=Object.assign({},e):this.goBack()}else this.goBack()}resolveEntityCollision(t){const e=this.timeManager.getTimer("death");if(!Bt(t))if(kt(t)&&!e){if(this.timeManager.getTimer("invincible"))return;this.timeManager.setTimer("death",Q),this.soundManager.play("explode"),this.lives-=1,0===this.lives&&this.die()}else this.goBack()}respawn(t=!1){t&&(this.power=R.Default),this.soundManager.pauseAll(),this.timeManager.setTimer("spawn",q),this.timeManager.setTimer("invincible",H),this.position=Object.assign({},F),this.prevPosition=Object.assign({},F)}deconstruct(){this.soundManager.pauseAll(),Ct.unsubscribe(this.id)}}class Ot extends xt{constructor(t,e,i){super(t,Object.assign({},I),e),this.direction=e,this.shooter=i,this.soundManager=new yt(["hit","hitdmg"])}update(){this.move(G)}render(){this.animateMovement(ht.sprites.bullet[this.direction])}resolveEdgeCollision(){jt.toRemove(this.id)}resolveTileCollision(t,e){if(t.every(t=>dt.includes(t.type)))return;jt.toRemove(this.id);const i=Mt(this.shooter)&&this.shooter.power===R.Second;t.some(t=>t.type===D.Steel)?this.soundManager.play("hit"):this.soundManager.play("hitdmg"),t.forEach(t=>{dt.includes(t.type)||t.type===D.Steel&&!i||e.destroy(t.position)})}resolveEntityCollision(t){Bt(t)||(Mt(this.shooter)&&Tt(t)&&t.type>=1&&this.soundManager.play("hit"),jt.toRemove(this.id))}}class At extends wt{constructor(t,e){super(e,Object.assign({},j),B.Bottom),this.type=t,this.lives=W[t].lives,this.prevTile=Object.assign({},e),this.timeManager=new ft,this.soundManager=new yt(["explode"]),this.timeManager.setTimer("spawn",q),Ct.subscribe(this.id,function(t){t===C.Stopwatch?this.timeManager.setTimer("freeze",U):t===C.Grenade&&(this.timeManager.some(["death","spawn"])||this.die())}.bind(this))}update(){const t=this.timeManager.getTimer("spawn"),e=this.timeManager.getTimer("death"),i=this.timeManager.getTimer("freeze");if(this.timeManager.decrementTimers(),t){if(this.isSpawnSpotClear())return void this.timeManager.setTimer("spawn",q)}else{if(e||i)return;this.aiMove(),this.shot(W[this.type].shotCD)}}render(){const t=this.timeManager.getTimer("spawn"),e=this.timeManager.getTimer("death");return t?S(this.position,ht.variableSprites.tankSpawn,q,t):e?S(this.position,ht.variableSprites.tankDestruction,Q,e):void(this.type===E.Armored?this.animateMovement(ht.sprites.enemy[this.type][this.lives][this.direction]):this.animateMovement(ht.sprites.enemy[this.type][this.direction]))}aiMove(){const{velocity:t}=W[this.type];Math.abs(Math.floor(this.prevTile.x-this.position.x))>120||Math.abs(Math.floor(this.prevTile.y-this.position.y))>120?(this.prevTile=Object.assign({},this.position),this.setRandomDirection(),this.move(t)):this.move(t)}resolveEdgeCollision(){this.goBack(),this.setRandomDirection()}resolveTileCollision(t){if(1===t.length){const e=this.forgiveCollision(t[0]);e?this.position=Object.assign({},e):(this.setRandomDirection(),this.goBack())}else this.setRandomDirection(),this.goBack()}resolveEntityCollision(t){Bt(t)||(kt(t)&&Mt(t.shooter)?1===this.lives?this.die():this.lives-=1:Tt(t)?(this.goBack(),this.setOpositeDirection()):Mt(t)&&(this.timeManager.getTimer("shotCD")>10&&this.setOpositeDirection(),this.goBack()))}setRandomDirection(){const t=[B.Top,B.Right,B.Bottom,B.Left].filter(t=>t!==this.direction),e=Math.floor(Math.random()*t.length);this.direction=t[e]}setOpositeDirection(){this.direction===B.Top?this.direction=B.Bottom:this.direction===B.Bottom?this.direction=B.Top:this.direction===B.Right?this.direction=B.Left:this.direction=B.Right}isSpawnSpotClear(){return jt.entities.filter(t=>t.id!==this.id&&!kt(t)).filter(t=>!Tt(t)||!t.timeManager.getTimer("spawn")).some(t=>M(t.getBoundingBox(),this.getBoundingBox()))}deconstruct(){Ct.unsubscribe(this.id)}}class Lt extends vt{constructor(){super(z,P),this.isDestroyed=!1}render(){this.isDestroyed?ht.sprites.flagDeath(this.position,this.size):ht.sprites.flag(this.position,this.size)}resolveEntityCollision(t){kt(t)&&(this.isDestroyed=!0)}}const jt=new class{constructor(){this.toRemove=(t=>{this.toRemoveQueue.add(t)}),this.removeFromQueue=(()=>{this.toRemoveQueue.forEach(t=>{const e=this.pool[t];this._checkDeath(e)||(delete this.pool[t],e.deconstruct(),this.toRemoveQueue.delete(t))})}),this.pool={},this.toRemoveQueue=new Set}spawnEntity(t,...e){const i=new s[t](...e);this.pool[i.id]=i}getEnemies(){return this.entities.filter(Tt)}getPlayer(){return this.entities.find(Mt)}getFlag(){return this.entities.find(St)}render(){this.entities.forEach(t=>t.render())}update(){this.entities.forEach(t=>t.update())}checkCollisions(t){const e=new Set;this.entities.forEach(i=>{Bt(i)||St(i)||(this.checkTileCollision(i,t),this.checkEntitiesCollision(i,e),e.add(i.id))})}checkTileCollision(t,e){if(t.isOutOfScreen())t.resolveEdgeCollision();else{const[i,s]=t.getFrontCollisionPoints(),n=e.lookupRange(i,s).filter(t=>ut.includes(t.type)).filter(e=>M(t.getBoundingBox(),{x1:e.position.x,x2:e.position.x+Z,y1:e.position.y,y2:e.position.y+Z}));n.length&&t.resolveTileCollision(n,e)}}checkEntitiesCollision(t,e){this.entities.forEach(i=>{t.id===i.id||e.has(i.id)||this._isInteractive(i)&&M(t.getBoundingBox(),i.getBoundingBox())&&(t.resolveEntityCollision(i),i.resolveEntityCollision(t))})}clear(t=!0){if(t)Object.values(this.pool).forEach(t=>t.deconstruct()),this.pool={};else{const t=this.getPlayer();Object.values(this.pool).filter(e=>e.id!==t.id).forEach(t=>t.deconstruct()),this.pool={[t.id]:t}}this.toRemoveQueue=new Set}_isInteractive(t){return!bt(t)||!t.timeManager.some(["spawn","death"])}_checkDeath(t){if(bt(t))return t.timeManager.getTimer("death")}get entities(){return Object.values(this.pool)}};class Pt{constructor(t,e,i){this.number=t,this.map=e,this.tanks=[...i],this.powerupsAvailable=5,this.timeManager=new ft,this.soundManager=new yt(["start"]),this.timeManager.setTimer("powerupSpawnCD",K),this.soundManager.play("start"),jt.spawnEntity("Flag")}update(){this.timeManager.decrementTimers(),this.spawnEnemy(),this.spawnPowerup()}isFinish(){const t=jt.getEnemies();return!this.tanks.length&&!t.length}spawnEnemy(){const t=this.timeManager.getTimer("enemySpawnCD"),e=jt.getEnemies();if(!this.tanks.length||e.length>4||t)return;const i=T(2);this.timeManager.setTimer("enemySpawnCD",V),jt.spawnEntity("Enemy",this.tanks.pop(),Object.assign({},Y[i]))}spawnPowerup(){if(this.timeManager.getTimer("powerupSpawnCD")||!this.powerupsAvailable)return;const t=T(Object.keys(C).length/2);jt.spawnEntity("Powerup",C[C[t]],{x:T(500),y:T(500)}),this.timeManager.setTimer("powerupSpawnCD",K),this.powerupsAvailable-=1}render(){this.map.renderLayer(O.under),this.map.renderLayer(O.main),jt.render(),this.map.renderLayer(O.over)}get screenNum(){return this.number+1}}class zt{constructor(){this.isStartScreen=!0,this.isLost=!1,this.timeManager=new ft,this.soundManager=new yt(["gameover"])}createLoop(){let t=0,e=0;const i=s=>{for(t+=(s-e)/1e3;t>L;)this.update(),t-=L;this.render(),e=s,requestAnimationFrame(i)};i(0)}update(){this.timeManager.decrementTimers();const t=this.timeManager.getTimer("screenFade");if(this.isLost||this.isStartScreen||t)return;this.stage.update(),jt.update(),jt.checkCollisions(this.stage.map),jt.removeFromQueue();const e=jt.getPlayer(),i=jt.getFlag();if(!e||i.isDestroyed)return e&&e.soundManager.pauseAll(),this.gameOver();this.stage.isFinish()&&this.toNextStage()}render(){et.clearScreen(),nt.clearScreen(),this.isStartScreen?et.renderStartScreen():this.renderGame()}renderGame(){const t=this.timeManager.getTimer("screenFade");if(this.stage.render(),this.isLost)et.renderGameOver(t);else if(t)et.renderChaingingStage(t);else{const t=jt.getPlayer();nt.render(t.lives,this.stage.screenNum,this.stage.tanks)}}gameOver(){this.soundManager.play("gameover"),this.timeManager.setTimer("screenFade",X),this.isLost=!0}isWaitingForRestart(){return!this.timeManager.getTimer("screenFade")&&this.isLost}getNextStageNum(){let t=this.stage.number+1;return t>lt.length-1&&(t=0),t}toNextStage(){this.timeManager.setTimer("screenFade",X),jt.clear(!1);const t=this.getNextStageNum(),e=jt.getPlayer();this.stage=new Pt(t,new gt(lt[t]),pt[t]),e.respawn()}play(){this.isStartScreen=!1,jt.spawnEntity("Player"),this.timeManager.setTimer("screenFade",X),this.stage=new Pt(0,new gt(lt[0]),pt[0])}restart(){this.isLost=!1,jt.clear(),this.play()}}!async function(){await ht.loadSprite(o.a),ht.loadAudio({explode:a.a,hit:c.a,hitdmg:p.a,neutral:d.a,powerup:g.a,move:f.a,start:x.a,gameover:b.a});const t=new zt;ct.listenToEvents(t),t.createLoop()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,